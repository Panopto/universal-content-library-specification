#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu May 31 16:06:10 2018 by generateDS.py version 2.29.14.
# Python 2.7.14 (v2.7.14:84471935ed, Sep 16 2017, 20:19:30) [MSC v.1500 32 bit (Intel)]
#
# Command line options:
#   ('-o', 'ucs_session.py')
#   ('-s', 'ucs_session_subs.py')
#
# Command line arguments:
#   universal-capture-2.0.xsd
#
# Command line:
#   C:\Python27\Scripts\generateDS.py -o "ucs_session.py" -s "ucs_session_subs.py" universal-capture-2.0.xsd
#
# Current working directory (os.getcwd()):
#   schemas
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class Session(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Title=None, Description=None, Date=None, Creator=None, Thumbnail=None, ThumbnailTime=None, Videos=None, Presentations=None, Images=None, Cuts=None, Tags=None, Extensions=None, Attachments=None):
        self.original_tagname_ = None
        self.Title = Title
        self.Description = Description
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.Creator = Creator
        self.Thumbnail = Thumbnail
        self.ThumbnailTime = ThumbnailTime
        self.Videos = Videos
        self.Presentations = Presentations
        self.Images = Images
        self.Cuts = Cuts
        self.Tags = Tags
        self.Extensions = Extensions
        self.Attachments = Attachments
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Session)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Session.subclass:
            return Session.subclass(*args_, **kwargs_)
        else:
            return Session(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Title(self): return self.Title
    def set_Title(self, Title): self.Title = Title
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def get_Creator(self): return self.Creator
    def set_Creator(self, Creator): self.Creator = Creator
    def get_Thumbnail(self): return self.Thumbnail
    def set_Thumbnail(self, Thumbnail): self.Thumbnail = Thumbnail
    def get_ThumbnailTime(self): return self.ThumbnailTime
    def set_ThumbnailTime(self, ThumbnailTime): self.ThumbnailTime = ThumbnailTime
    def get_Videos(self): return self.Videos
    def set_Videos(self, Videos): self.Videos = Videos
    def get_Presentations(self): return self.Presentations
    def set_Presentations(self, Presentations): self.Presentations = Presentations
    def get_Images(self): return self.Images
    def set_Images(self, Images): self.Images = Images
    def get_Cuts(self): return self.Cuts
    def set_Cuts(self, Cuts): self.Cuts = Cuts
    def get_Tags(self): return self.Tags
    def set_Tags(self, Tags): self.Tags = Tags
    def get_Extensions(self): return self.Extensions
    def set_Extensions(self, Extensions): self.Extensions = Extensions
    def get_Attachments(self): return self.Attachments
    def set_Attachments(self, Attachments): self.Attachments = Attachments
    def hasContent_(self):
        if (
            self.Title is not None or
            self.Description is not None or
            self.Date is not None or
            self.Creator is not None or
            self.Thumbnail is not None or
            self.ThumbnailTime is not None or
            self.Videos is not None or
            self.Presentations is not None or
            self.Images is not None or
            self.Cuts is not None or
            self.Tags is not None or
            self.Extensions is not None or
            self.Attachments is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ucsns:', name_='Session', namespacedef_='xmlns:ucsns="http://tempuri.org/UniversalCaptureSpecification/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Session')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Session')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ucsns:', name_='Session', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ucsns:', name_='Session'):
        pass
    def exportChildren(self, outfile, level, namespace_='ucsns:', name_='Session', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Title is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:Title>%s</ucsns:Title>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Title), input_name='Title')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:Description>%s</ucsns:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        if self.Date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:Date>%s</ucsns:Date>%s' % (self.gds_format_datetime(self.Date, input_name='Date'), eol_))
        if self.Creator is not None:
            self.Creator.export(outfile, level, namespace_, name_='Creator', pretty_print=pretty_print)
        if self.Thumbnail is not None:
            self.Thumbnail.export(outfile, level, namespace_, name_='Thumbnail', pretty_print=pretty_print)
        if self.ThumbnailTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:ThumbnailTime>%s</ucsns:ThumbnailTime>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ThumbnailTime), input_name='ThumbnailTime')), eol_))
        if self.Videos is not None:
            self.Videos.export(outfile, level, namespace_, name_='Videos', pretty_print=pretty_print)
        if self.Presentations is not None:
            self.Presentations.export(outfile, level, namespace_, name_='Presentations', pretty_print=pretty_print)
        if self.Images is not None:
            self.Images.export(outfile, level, namespace_, name_='Images', pretty_print=pretty_print)
        if self.Cuts is not None:
            self.Cuts.export(outfile, level, namespace_, name_='Cuts', pretty_print=pretty_print)
        if self.Tags is not None:
            self.Tags.export(outfile, level, namespace_, name_='Tags', pretty_print=pretty_print)
        if self.Extensions is not None:
            self.Extensions.export(outfile, level, namespace_, name_='Extensions', pretty_print=pretty_print)
        if self.Attachments is not None:
            self.Attachments.export(outfile, level, namespace_, name_='Attachments', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Title':
            Title_ = child_.text
            Title_ = self.gds_validate_string(Title_, node, 'Title')
            self.Title = Title_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.Date = dval_
        elif nodeName_ == 'Creator':
            obj_ = Contact.factory()
            obj_.build(child_)
            self.Creator = obj_
            obj_.original_tagname_ = 'Creator'
        elif nodeName_ == 'Thumbnail':
            obj_ = File.factory()
            obj_.build(child_)
            self.Thumbnail = obj_
            obj_.original_tagname_ = 'Thumbnail'
        elif nodeName_ == 'ThumbnailTime':
            ThumbnailTime_ = child_.text
            ThumbnailTime_ = self.gds_validate_string(ThumbnailTime_, node, 'ThumbnailTime')
            self.ThumbnailTime = ThumbnailTime_
        elif nodeName_ == 'Videos':
            obj_ = VideosType.factory()
            obj_.build(child_)
            self.Videos = obj_
            obj_.original_tagname_ = 'Videos'
        elif nodeName_ == 'Presentations':
            obj_ = PresentationsType.factory()
            obj_.build(child_)
            self.Presentations = obj_
            obj_.original_tagname_ = 'Presentations'
        elif nodeName_ == 'Images':
            obj_ = ImagesType.factory()
            obj_.build(child_)
            self.Images = obj_
            obj_.original_tagname_ = 'Images'
        elif nodeName_ == 'Cuts':
            obj_ = CutsType1.factory()
            obj_.build(child_)
            self.Cuts = obj_
            obj_.original_tagname_ = 'Cuts'
        elif nodeName_ == 'Tags':
            obj_ = TagsType.factory()
            obj_.build(child_)
            self.Tags = obj_
            obj_.original_tagname_ = 'Tags'
        elif nodeName_ == 'Extensions':
            obj_ = ExtensionsType.factory()
            obj_.build(child_)
            self.Extensions = obj_
            obj_.original_tagname_ = 'Extensions'
        elif nodeName_ == 'Attachments':
            obj_ = AttachmentsType.factory()
            obj_.build(child_)
            self.Attachments = obj_
            obj_.original_tagname_ = 'Attachments'
# end class Session


class File(GeneratedsSuper):
    """A CRC validation value to optionally detect and deal with random,
    non-malicious corruption"""
    subclass = None
    superclass = None
    def __init__(self, Checksum=None, valueOf_=None):
        self.original_tagname_ = None
        self.Checksum = _cast(None, Checksum)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, File)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if File.subclass:
            return File.subclass(*args_, **kwargs_)
        else:
            return File(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Checksum(self): return self.Checksum
    def set_Checksum(self, Checksum): self.Checksum = Checksum
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ucsns:', name_='File', namespacedef_='xmlns:ucsns="http://tempuri.org/UniversalCaptureSpecification/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('File')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='File')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='ucsns:', name_='File', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ucsns:', name_='File'):
        if self.Checksum is not None and 'Checksum' not in already_processed:
            already_processed.add('Checksum')
            outfile.write(' Checksum=%s' % (quote_attrib(self.Checksum), ))
    def exportChildren(self, outfile, level, namespace_='ucsns:', name_='File', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Checksum', node)
        if value is not None and 'Checksum' not in already_processed:
            already_processed.add('Checksum')
            self.Checksum = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class File


class Contact(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, FirstName=None, LastName=None, Email=None):
        self.original_tagname_ = None
        self.FirstName = FirstName
        self.LastName = LastName
        self.Email = Email
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Contact)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Contact.subclass:
            return Contact.subclass(*args_, **kwargs_)
        else:
            return Contact(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FirstName(self): return self.FirstName
    def set_FirstName(self, FirstName): self.FirstName = FirstName
    def get_LastName(self): return self.LastName
    def set_LastName(self, LastName): self.LastName = LastName
    def get_Email(self): return self.Email
    def set_Email(self, Email): self.Email = Email
    def hasContent_(self):
        if (
            self.FirstName is not None or
            self.LastName is not None or
            self.Email is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ucsns:', name_='Contact', namespacedef_='xmlns:ucsns="http://tempuri.org/UniversalCaptureSpecification/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Contact')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Contact')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ucsns:', name_='Contact', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ucsns:', name_='Contact'):
        pass
    def exportChildren(self, outfile, level, namespace_='ucsns:', name_='Contact', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FirstName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:FirstName>%s</ucsns:FirstName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FirstName), input_name='FirstName')), eol_))
        if self.LastName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:LastName>%s</ucsns:LastName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LastName), input_name='LastName')), eol_))
        if self.Email is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:Email>%s</ucsns:Email>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Email), input_name='Email')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'FirstName':
            FirstName_ = child_.text
            FirstName_ = self.gds_validate_string(FirstName_, node, 'FirstName')
            self.FirstName = FirstName_
        elif nodeName_ == 'LastName':
            LastName_ = child_.text
            LastName_ = self.gds_validate_string(LastName_, node, 'LastName')
            self.LastName = LastName_
        elif nodeName_ == 'Email':
            Email_ = child_.text
            Email_ = self.gds_validate_string(Email_, node, 'Email')
            self.Email = Email_
# end class Contact


class Extension(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ExtensionId=None):
        self.original_tagname_ = None
        self.ExtensionId = ExtensionId
        self.validate_Guid(self.ExtensionId)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Extension)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Extension.subclass:
            return Extension.subclass(*args_, **kwargs_)
        else:
            return Extension(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ExtensionId(self): return self.ExtensionId
    def set_ExtensionId(self, ExtensionId): self.ExtensionId = ExtensionId
    def validate_Guid(self, value):
        # Validate type Guid, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_Guid_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_Guid_patterns_, ))
    validate_Guid_patterns_ = [[u'^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$']]
    def hasContent_(self):
        if (
            self.ExtensionId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ucsns:', name_='Extension', namespacedef_='xmlns:ucsns="http://tempuri.org/UniversalCaptureSpecification/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Extension')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Extension')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ucsns:', name_='Extension', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ucsns:', name_='Extension'):
        pass
    def exportChildren(self, outfile, level, namespace_='ucsns:', name_='Extension', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ExtensionId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:ExtensionId>%s</ucsns:ExtensionId>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ExtensionId), input_name='ExtensionId')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ExtensionId':
            ExtensionId_ = child_.text
            ExtensionId_ = self.gds_validate_string(ExtensionId_, node, 'ExtensionId')
            self.ExtensionId = ExtensionId_
            # validate type Guid
            self.validate_Guid(self.ExtensionId)
# end class Extension


class VideosType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Video=None):
        self.original_tagname_ = None
        if Video is None:
            self.Video = []
        else:
            self.Video = Video
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, VideosType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if VideosType.subclass:
            return VideosType.subclass(*args_, **kwargs_)
        else:
            return VideosType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Video(self): return self.Video
    def set_Video(self, Video): self.Video = Video
    def add_Video(self, value): self.Video.append(value)
    def insert_Video_at(self, index, value): self.Video.insert(index, value)
    def replace_Video_at(self, index, value): self.Video[index] = value
    def hasContent_(self):
        if (
            self.Video
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ucsns:', name_='VideosType', namespacedef_='xmlns:ucsns="http://tempuri.org/UniversalCaptureSpecification/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('VideosType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='VideosType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ucsns:', name_='VideosType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ucsns:', name_='VideosType'):
        pass
    def exportChildren(self, outfile, level, namespace_='ucsns:', name_='VideosType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Video_ in self.Video:
            Video_.export(outfile, level, namespace_, name_='Video', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Video':
            obj_ = VideoType.factory()
            obj_.build(child_)
            self.Video.append(obj_)
            obj_.original_tagname_ = 'Video'
# end class VideosType


class VideoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Title=None, Start=None, File=None, LocalFilename=None, Bitrate=None, FileType=None, Cuts=None, TableOfContents=None, Type=None, Transcripts=None):
        self.original_tagname_ = None
        self.Title = Title
        self.Start = Start
        self.File = File
        self.LocalFilename = LocalFilename
        self.Bitrate = Bitrate
        self.FileType = FileType
        self.Cuts = Cuts
        self.TableOfContents = TableOfContents
        self.Type = Type
        self.validate_TypeType(self.Type)
        self.Transcripts = Transcripts
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, VideoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if VideoType.subclass:
            return VideoType.subclass(*args_, **kwargs_)
        else:
            return VideoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Title(self): return self.Title
    def set_Title(self, Title): self.Title = Title
    def get_Start(self): return self.Start
    def set_Start(self, Start): self.Start = Start
    def get_File(self): return self.File
    def set_File(self, File): self.File = File
    def get_LocalFilename(self): return self.LocalFilename
    def set_LocalFilename(self, LocalFilename): self.LocalFilename = LocalFilename
    def get_Bitrate(self): return self.Bitrate
    def set_Bitrate(self, Bitrate): self.Bitrate = Bitrate
    def get_FileType(self): return self.FileType
    def set_FileType(self, FileType): self.FileType = FileType
    def get_Cuts(self): return self.Cuts
    def set_Cuts(self, Cuts): self.Cuts = Cuts
    def get_TableOfContents(self): return self.TableOfContents
    def set_TableOfContents(self, TableOfContents): self.TableOfContents = TableOfContents
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_Transcripts(self): return self.Transcripts
    def set_Transcripts(self, Transcripts): self.Transcripts = Transcripts
    def validate_TypeType(self, value):
        # Validate type TypeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['Primary', 'Secondary', 'Audio']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TypeType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Title is not None or
            self.Start is not None or
            self.File is not None or
            self.LocalFilename is not None or
            self.Bitrate is not None or
            self.FileType is not None or
            self.Cuts is not None or
            self.TableOfContents is not None or
            self.Type is not None or
            self.Transcripts is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ucsns:', name_='VideoType', namespacedef_='xmlns:ucsns="http://tempuri.org/UniversalCaptureSpecification/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('VideoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='VideoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ucsns:', name_='VideoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ucsns:', name_='VideoType'):
        pass
    def exportChildren(self, outfile, level, namespace_='ucsns:', name_='VideoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Title is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:Title>%s</ucsns:Title>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Title), input_name='Title')), eol_))
        if self.Start is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:Start>%s</ucsns:Start>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Start), input_name='Start')), eol_))
        if self.File is not None:
            self.File.export(outfile, level, namespace_, name_='File', pretty_print=pretty_print)
        if self.LocalFilename is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:LocalFilename>%s</ucsns:LocalFilename>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LocalFilename), input_name='LocalFilename')), eol_))
        if self.Bitrate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:Bitrate>%s</ucsns:Bitrate>%s' % (self.gds_format_integer(self.Bitrate, input_name='Bitrate'), eol_))
        if self.FileType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:FileType>%s</ucsns:FileType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.FileType), input_name='FileType')), eol_))
        if self.Cuts is not None:
            self.Cuts.export(outfile, level, namespace_, name_='Cuts', pretty_print=pretty_print)
        if self.TableOfContents is not None:
            self.TableOfContents.export(outfile, level, namespace_, name_='TableOfContents', pretty_print=pretty_print)
        if self.Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:Type>%s</ucsns:Type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), eol_))
        if self.Transcripts is not None:
            self.Transcripts.export(outfile, level, namespace_, name_='Transcripts', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Title':
            Title_ = child_.text
            Title_ = self.gds_validate_string(Title_, node, 'Title')
            self.Title = Title_
        elif nodeName_ == 'Start':
            Start_ = child_.text
            Start_ = self.gds_validate_string(Start_, node, 'Start')
            self.Start = Start_
        elif nodeName_ == 'File':
            obj_ = File.factory()
            obj_.build(child_)
            self.File = obj_
            obj_.original_tagname_ = 'File'
        elif nodeName_ == 'LocalFilename':
            LocalFilename_ = child_.text
            LocalFilename_ = self.gds_validate_string(LocalFilename_, node, 'LocalFilename')
            self.LocalFilename = LocalFilename_
        elif nodeName_ == 'Bitrate':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Bitrate')
            self.Bitrate = ival_
        elif nodeName_ == 'FileType':
            FileType_ = child_.text
            FileType_ = self.gds_validate_string(FileType_, node, 'FileType')
            self.FileType = FileType_
        elif nodeName_ == 'Cuts':
            obj_ = CutsType.factory()
            obj_.build(child_)
            self.Cuts = obj_
            obj_.original_tagname_ = 'Cuts'
        elif nodeName_ == 'TableOfContents':
            obj_ = TableOfContentsType.factory()
            obj_.build(child_)
            self.TableOfContents = obj_
            obj_.original_tagname_ = 'TableOfContents'
        elif nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
            # validate type TypeType
            self.validate_TypeType(self.Type)
        elif nodeName_ == 'Transcripts':
            obj_ = TranscriptsType.factory()
            obj_.build(child_)
            self.Transcripts = obj_
            obj_.original_tagname_ = 'Transcripts'
# end class VideoType


class CutsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Cut=None):
        self.original_tagname_ = None
        if Cut is None:
            self.Cut = []
        else:
            self.Cut = Cut
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CutsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CutsType.subclass:
            return CutsType.subclass(*args_, **kwargs_)
        else:
            return CutsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Cut(self): return self.Cut
    def set_Cut(self, Cut): self.Cut = Cut
    def add_Cut(self, value): self.Cut.append(value)
    def insert_Cut_at(self, index, value): self.Cut.insert(index, value)
    def replace_Cut_at(self, index, value): self.Cut[index] = value
    def hasContent_(self):
        if (
            self.Cut
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ucsns:', name_='CutsType', namespacedef_='xmlns:ucsns="http://tempuri.org/UniversalCaptureSpecification/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CutsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CutsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ucsns:', name_='CutsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ucsns:', name_='CutsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='ucsns:', name_='CutsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Cut_ in self.Cut:
            Cut_.export(outfile, level, namespace_, name_='Cut', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Cut':
            obj_ = CutType.factory()
            obj_.build(child_)
            self.Cut.append(obj_)
            obj_.original_tagname_ = 'Cut'
# end class CutsType


class CutType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Start=None, Duration=None):
        self.original_tagname_ = None
        self.Start = Start
        self.Duration = Duration
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CutType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CutType.subclass:
            return CutType.subclass(*args_, **kwargs_)
        else:
            return CutType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Start(self): return self.Start
    def set_Start(self, Start): self.Start = Start
    def get_Duration(self): return self.Duration
    def set_Duration(self, Duration): self.Duration = Duration
    def hasContent_(self):
        if (
            self.Start is not None or
            self.Duration is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ucsns:', name_='CutType', namespacedef_='xmlns:ucsns="http://tempuri.org/UniversalCaptureSpecification/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CutType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CutType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ucsns:', name_='CutType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ucsns:', name_='CutType'):
        pass
    def exportChildren(self, outfile, level, namespace_='ucsns:', name_='CutType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Start is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:Start>%s</ucsns:Start>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Start), input_name='Start')), eol_))
        if self.Duration is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:Duration>%s</ucsns:Duration>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Duration), input_name='Duration')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Start':
            Start_ = child_.text
            Start_ = self.gds_validate_string(Start_, node, 'Start')
            self.Start = Start_
        elif nodeName_ == 'Duration':
            Duration_ = child_.text
            Duration_ = self.gds_validate_string(Duration_, node, 'Duration')
            self.Duration = Duration_
# end class CutType


class TableOfContentsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Entry=None):
        self.original_tagname_ = None
        if Entry is None:
            self.Entry = []
        else:
            self.Entry = Entry
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TableOfContentsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TableOfContentsType.subclass:
            return TableOfContentsType.subclass(*args_, **kwargs_)
        else:
            return TableOfContentsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Entry(self): return self.Entry
    def set_Entry(self, Entry): self.Entry = Entry
    def add_Entry(self, value): self.Entry.append(value)
    def insert_Entry_at(self, index, value): self.Entry.insert(index, value)
    def replace_Entry_at(self, index, value): self.Entry[index] = value
    def hasContent_(self):
        if (
            self.Entry
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ucsns:', name_='TableOfContentsType', namespacedef_='xmlns:ucsns="http://tempuri.org/UniversalCaptureSpecification/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TableOfContentsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TableOfContentsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ucsns:', name_='TableOfContentsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ucsns:', name_='TableOfContentsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='ucsns:', name_='TableOfContentsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Entry_ in self.Entry:
            Entry_.export(outfile, level, namespace_, name_='Entry', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Entry':
            obj_ = EntryType.factory()
            obj_.build(child_)
            self.Entry.append(obj_)
            obj_.original_tagname_ = 'Entry'
# end class TableOfContentsType


class EntryType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Title=None, Description=None, Url=None, Time=None):
        self.original_tagname_ = None
        self.Title = Title
        self.Description = Description
        self.Url = Url
        self.Time = Time
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EntryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EntryType.subclass:
            return EntryType.subclass(*args_, **kwargs_)
        else:
            return EntryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Title(self): return self.Title
    def set_Title(self, Title): self.Title = Title
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Url(self): return self.Url
    def set_Url(self, Url): self.Url = Url
    def get_Time(self): return self.Time
    def set_Time(self, Time): self.Time = Time
    def hasContent_(self):
        if (
            self.Title is not None or
            self.Description is not None or
            self.Url is not None or
            self.Time is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ucsns:', name_='EntryType', namespacedef_='xmlns:ucsns="http://tempuri.org/UniversalCaptureSpecification/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EntryType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EntryType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ucsns:', name_='EntryType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ucsns:', name_='EntryType'):
        pass
    def exportChildren(self, outfile, level, namespace_='ucsns:', name_='EntryType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Title is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:Title>%s</ucsns:Title>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Title), input_name='Title')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:Description>%s</ucsns:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        if self.Url is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:Url>%s</ucsns:Url>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Url), input_name='Url')), eol_))
        if self.Time is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:Time>%s</ucsns:Time>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Time), input_name='Time')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Title':
            Title_ = child_.text
            Title_ = self.gds_validate_string(Title_, node, 'Title')
            self.Title = Title_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'Url':
            Url_ = child_.text
            Url_ = self.gds_validate_string(Url_, node, 'Url')
            self.Url = Url_
        elif nodeName_ == 'Time':
            Time_ = child_.text
            Time_ = self.gds_validate_string(Time_, node, 'Time')
            self.Time = Time_
# end class EntryType


class TranscriptsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Transcript=None):
        self.original_tagname_ = None
        if Transcript is None:
            self.Transcript = []
        else:
            self.Transcript = Transcript
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TranscriptsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TranscriptsType.subclass:
            return TranscriptsType.subclass(*args_, **kwargs_)
        else:
            return TranscriptsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Transcript(self): return self.Transcript
    def set_Transcript(self, Transcript): self.Transcript = Transcript
    def add_Transcript(self, value): self.Transcript.append(value)
    def insert_Transcript_at(self, index, value): self.Transcript.insert(index, value)
    def replace_Transcript_at(self, index, value): self.Transcript[index] = value
    def hasContent_(self):
        if (
            self.Transcript
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ucsns:', name_='TranscriptsType', namespacedef_='xmlns:ucsns="http://tempuri.org/UniversalCaptureSpecification/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TranscriptsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TranscriptsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ucsns:', name_='TranscriptsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ucsns:', name_='TranscriptsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='ucsns:', name_='TranscriptsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Transcript_ in self.Transcript:
            Transcript_.export(outfile, level, namespace_, name_='Transcript', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Transcript':
            obj_ = TranscriptType.factory()
            obj_.build(child_)
            self.Transcript.append(obj_)
            obj_.original_tagname_ = 'Transcript'
# end class TranscriptsType


class TranscriptType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, File=None, LocalFilename=None, LCID=None, Source=None, Visible=True):
        self.original_tagname_ = None
        self.File = File
        self.LocalFilename = LocalFilename
        self.LCID = LCID
        self.Source = Source
        self.Visible = Visible
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TranscriptType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TranscriptType.subclass:
            return TranscriptType.subclass(*args_, **kwargs_)
        else:
            return TranscriptType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_File(self): return self.File
    def set_File(self, File): self.File = File
    def get_LocalFilename(self): return self.LocalFilename
    def set_LocalFilename(self, LocalFilename): self.LocalFilename = LocalFilename
    def get_LCID(self): return self.LCID
    def set_LCID(self, LCID): self.LCID = LCID
    def get_Source(self): return self.Source
    def set_Source(self, Source): self.Source = Source
    def get_Visible(self): return self.Visible
    def set_Visible(self, Visible): self.Visible = Visible
    def hasContent_(self):
        if (
            self.File is not None or
            self.LocalFilename is not None or
            self.LCID is not None or
            self.Source is not None or
            not self.Visible
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ucsns:', name_='TranscriptType', namespacedef_='xmlns:ucsns="http://tempuri.org/UniversalCaptureSpecification/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TranscriptType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TranscriptType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ucsns:', name_='TranscriptType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ucsns:', name_='TranscriptType'):
        pass
    def exportChildren(self, outfile, level, namespace_='ucsns:', name_='TranscriptType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.File is not None:
            self.File.export(outfile, level, namespace_, name_='File', pretty_print=pretty_print)
        if self.LocalFilename is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:LocalFilename>%s</ucsns:LocalFilename>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LocalFilename), input_name='LocalFilename')), eol_))
        if self.LCID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:LCID>%s</ucsns:LCID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LCID), input_name='LCID')), eol_))
        if self.Source is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:Source>%s</ucsns:Source>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Source), input_name='Source')), eol_))
        if not self.Visible:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:Visible>%s</ucsns:Visible>%s' % (self.gds_format_boolean(self.Visible, input_name='Visible'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'File':
            obj_ = File.factory()
            obj_.build(child_)
            self.File = obj_
            obj_.original_tagname_ = 'File'
        elif nodeName_ == 'LocalFilename':
            LocalFilename_ = child_.text
            LocalFilename_ = self.gds_validate_string(LocalFilename_, node, 'LocalFilename')
            self.LocalFilename = LocalFilename_
        elif nodeName_ == 'LCID':
            LCID_ = child_.text
            LCID_ = self.gds_validate_string(LCID_, node, 'LCID')
            self.LCID = LCID_
        elif nodeName_ == 'Source':
            Source_ = child_.text
            Source_ = self.gds_validate_string(Source_, node, 'Source')
            self.Source = Source_
        elif nodeName_ == 'Visible':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'Visible')
            self.Visible = ival_
# end class TranscriptType


class PresentationsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Presentation=None):
        self.original_tagname_ = None
        if Presentation is None:
            self.Presentation = []
        else:
            self.Presentation = Presentation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PresentationsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PresentationsType.subclass:
            return PresentationsType.subclass(*args_, **kwargs_)
        else:
            return PresentationsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Presentation(self): return self.Presentation
    def set_Presentation(self, Presentation): self.Presentation = Presentation
    def add_Presentation(self, value): self.Presentation.append(value)
    def insert_Presentation_at(self, index, value): self.Presentation.insert(index, value)
    def replace_Presentation_at(self, index, value): self.Presentation[index] = value
    def hasContent_(self):
        if (
            self.Presentation
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ucsns:', name_='PresentationsType', namespacedef_='xmlns:ucsns="http://tempuri.org/UniversalCaptureSpecification/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PresentationsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PresentationsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ucsns:', name_='PresentationsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ucsns:', name_='PresentationsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='ucsns:', name_='PresentationsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Presentation_ in self.Presentation:
            Presentation_.export(outfile, level, namespace_, name_='Presentation', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Presentation':
            obj_ = PresentationType.factory()
            obj_.build(child_)
            self.Presentation.append(obj_)
            obj_.original_tagname_ = 'Presentation'
# end class PresentationsType


class PresentationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Start=None, File=None, LocalFilename=None, SlideChanges=None):
        self.original_tagname_ = None
        self.Start = Start
        self.File = File
        self.LocalFilename = LocalFilename
        self.SlideChanges = SlideChanges
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PresentationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PresentationType.subclass:
            return PresentationType.subclass(*args_, **kwargs_)
        else:
            return PresentationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Start(self): return self.Start
    def set_Start(self, Start): self.Start = Start
    def get_File(self): return self.File
    def set_File(self, File): self.File = File
    def get_LocalFilename(self): return self.LocalFilename
    def set_LocalFilename(self, LocalFilename): self.LocalFilename = LocalFilename
    def get_SlideChanges(self): return self.SlideChanges
    def set_SlideChanges(self, SlideChanges): self.SlideChanges = SlideChanges
    def hasContent_(self):
        if (
            self.Start is not None or
            self.File is not None or
            self.LocalFilename is not None or
            self.SlideChanges is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ucsns:', name_='PresentationType', namespacedef_='xmlns:ucsns="http://tempuri.org/UniversalCaptureSpecification/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PresentationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PresentationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ucsns:', name_='PresentationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ucsns:', name_='PresentationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='ucsns:', name_='PresentationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Start is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:Start>%s</ucsns:Start>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Start), input_name='Start')), eol_))
        if self.File is not None:
            self.File.export(outfile, level, namespace_, name_='File', pretty_print=pretty_print)
        if self.LocalFilename is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:LocalFilename>%s</ucsns:LocalFilename>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LocalFilename), input_name='LocalFilename')), eol_))
        if self.SlideChanges is not None:
            self.SlideChanges.export(outfile, level, namespace_, name_='SlideChanges', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Start':
            Start_ = child_.text
            Start_ = self.gds_validate_string(Start_, node, 'Start')
            self.Start = Start_
        elif nodeName_ == 'File':
            obj_ = File.factory()
            obj_.build(child_)
            self.File = obj_
            obj_.original_tagname_ = 'File'
        elif nodeName_ == 'LocalFilename':
            LocalFilename_ = child_.text
            LocalFilename_ = self.gds_validate_string(LocalFilename_, node, 'LocalFilename')
            self.LocalFilename = LocalFilename_
        elif nodeName_ == 'SlideChanges':
            obj_ = SlideChangesType.factory()
            obj_.build(child_)
            self.SlideChanges = obj_
            obj_.original_tagname_ = 'SlideChanges'
# end class PresentationType


class SlideChangesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SlideChange=None):
        self.original_tagname_ = None
        if SlideChange is None:
            self.SlideChange = []
        else:
            self.SlideChange = SlideChange
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SlideChangesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SlideChangesType.subclass:
            return SlideChangesType.subclass(*args_, **kwargs_)
        else:
            return SlideChangesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SlideChange(self): return self.SlideChange
    def set_SlideChange(self, SlideChange): self.SlideChange = SlideChange
    def add_SlideChange(self, value): self.SlideChange.append(value)
    def insert_SlideChange_at(self, index, value): self.SlideChange.insert(index, value)
    def replace_SlideChange_at(self, index, value): self.SlideChange[index] = value
    def hasContent_(self):
        if (
            self.SlideChange
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ucsns:', name_='SlideChangesType', namespacedef_='xmlns:ucsns="http://tempuri.org/UniversalCaptureSpecification/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SlideChangesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SlideChangesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ucsns:', name_='SlideChangesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ucsns:', name_='SlideChangesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='ucsns:', name_='SlideChangesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SlideChange_ in self.SlideChange:
            SlideChange_.export(outfile, level, namespace_, name_='SlideChange', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SlideChange':
            obj_ = SlideChangeType.factory()
            obj_.build(child_)
            self.SlideChange.append(obj_)
            obj_.original_tagname_ = 'SlideChange'
# end class SlideChangesType


class SlideChangeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Title=None, Description=None, Url=None, Time=None, SlideNumber=None):
        self.original_tagname_ = None
        self.Title = Title
        self.Description = Description
        self.Url = Url
        self.Time = Time
        self.SlideNumber = SlideNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SlideChangeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SlideChangeType.subclass:
            return SlideChangeType.subclass(*args_, **kwargs_)
        else:
            return SlideChangeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Title(self): return self.Title
    def set_Title(self, Title): self.Title = Title
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Url(self): return self.Url
    def set_Url(self, Url): self.Url = Url
    def get_Time(self): return self.Time
    def set_Time(self, Time): self.Time = Time
    def get_SlideNumber(self): return self.SlideNumber
    def set_SlideNumber(self, SlideNumber): self.SlideNumber = SlideNumber
    def hasContent_(self):
        if (
            self.Title is not None or
            self.Description is not None or
            self.Url is not None or
            self.Time is not None or
            self.SlideNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ucsns:', name_='SlideChangeType', namespacedef_='xmlns:ucsns="http://tempuri.org/UniversalCaptureSpecification/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SlideChangeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SlideChangeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ucsns:', name_='SlideChangeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ucsns:', name_='SlideChangeType'):
        pass
    def exportChildren(self, outfile, level, namespace_='ucsns:', name_='SlideChangeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Title is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:Title>%s</ucsns:Title>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Title), input_name='Title')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:Description>%s</ucsns:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        if self.Url is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:Url>%s</ucsns:Url>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Url), input_name='Url')), eol_))
        if self.Time is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:Time>%s</ucsns:Time>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Time), input_name='Time')), eol_))
        if self.SlideNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:SlideNumber>%s</ucsns:SlideNumber>%s' % (self.gds_format_integer(self.SlideNumber, input_name='SlideNumber'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Title':
            Title_ = child_.text
            Title_ = self.gds_validate_string(Title_, node, 'Title')
            self.Title = Title_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'Url':
            Url_ = child_.text
            Url_ = self.gds_validate_string(Url_, node, 'Url')
            self.Url = Url_
        elif nodeName_ == 'Time':
            Time_ = child_.text
            Time_ = self.gds_validate_string(Time_, node, 'Time')
            self.Time = Time_
        elif nodeName_ == 'SlideNumber':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'SlideNumber')
            self.SlideNumber = ival_
# end class SlideChangeType


class ImagesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Image=None):
        self.original_tagname_ = None
        if Image is None:
            self.Image = []
        else:
            self.Image = Image
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ImagesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ImagesType.subclass:
            return ImagesType.subclass(*args_, **kwargs_)
        else:
            return ImagesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Image(self): return self.Image
    def set_Image(self, Image): self.Image = Image
    def add_Image(self, value): self.Image.append(value)
    def insert_Image_at(self, index, value): self.Image.insert(index, value)
    def replace_Image_at(self, index, value): self.Image[index] = value
    def hasContent_(self):
        if (
            self.Image
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ucsns:', name_='ImagesType', namespacedef_='xmlns:ucsns="http://tempuri.org/UniversalCaptureSpecification/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ImagesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ImagesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ucsns:', name_='ImagesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ucsns:', name_='ImagesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='ucsns:', name_='ImagesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Image_ in self.Image:
            Image_.export(outfile, level, namespace_, name_='Image', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Image':
            obj_ = ImageType.factory()
            obj_.build(child_)
            self.Image.append(obj_)
            obj_.original_tagname_ = 'Image'
# end class ImagesType


class ImageType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, File=None, LocalFilename=None, Title=None, Description=None, Url=None, Time=None):
        self.original_tagname_ = None
        self.File = File
        self.LocalFilename = LocalFilename
        self.Title = Title
        self.Description = Description
        self.Url = Url
        self.Time = Time
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ImageType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ImageType.subclass:
            return ImageType.subclass(*args_, **kwargs_)
        else:
            return ImageType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_File(self): return self.File
    def set_File(self, File): self.File = File
    def get_LocalFilename(self): return self.LocalFilename
    def set_LocalFilename(self, LocalFilename): self.LocalFilename = LocalFilename
    def get_Title(self): return self.Title
    def set_Title(self, Title): self.Title = Title
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Url(self): return self.Url
    def set_Url(self, Url): self.Url = Url
    def get_Time(self): return self.Time
    def set_Time(self, Time): self.Time = Time
    def hasContent_(self):
        if (
            self.File is not None or
            self.LocalFilename is not None or
            self.Title is not None or
            self.Description is not None or
            self.Url is not None or
            self.Time is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ucsns:', name_='ImageType', namespacedef_='xmlns:ucsns="http://tempuri.org/UniversalCaptureSpecification/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ImageType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ImageType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ucsns:', name_='ImageType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ucsns:', name_='ImageType'):
        pass
    def exportChildren(self, outfile, level, namespace_='ucsns:', name_='ImageType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.File is not None:
            self.File.export(outfile, level, namespace_, name_='File', pretty_print=pretty_print)
        if self.LocalFilename is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:LocalFilename>%s</ucsns:LocalFilename>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LocalFilename), input_name='LocalFilename')), eol_))
        if self.Title is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:Title>%s</ucsns:Title>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Title), input_name='Title')), eol_))
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:Description>%s</ucsns:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        if self.Url is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:Url>%s</ucsns:Url>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Url), input_name='Url')), eol_))
        if self.Time is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:Time>%s</ucsns:Time>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Time), input_name='Time')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'File':
            obj_ = File.factory()
            obj_.build(child_)
            self.File = obj_
            obj_.original_tagname_ = 'File'
        elif nodeName_ == 'LocalFilename':
            LocalFilename_ = child_.text
            LocalFilename_ = self.gds_validate_string(LocalFilename_, node, 'LocalFilename')
            self.LocalFilename = LocalFilename_
        elif nodeName_ == 'Title':
            Title_ = child_.text
            Title_ = self.gds_validate_string(Title_, node, 'Title')
            self.Title = Title_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'Url':
            Url_ = child_.text
            Url_ = self.gds_validate_string(Url_, node, 'Url')
            self.Url = Url_
        elif nodeName_ == 'Time':
            Time_ = child_.text
            Time_ = self.gds_validate_string(Time_, node, 'Time')
            self.Time = Time_
# end class ImageType


class CutsType1(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Cut=None):
        self.original_tagname_ = None
        if Cut is None:
            self.Cut = []
        else:
            self.Cut = Cut
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CutsType1)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CutsType1.subclass:
            return CutsType1.subclass(*args_, **kwargs_)
        else:
            return CutsType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Cut(self): return self.Cut
    def set_Cut(self, Cut): self.Cut = Cut
    def add_Cut(self, value): self.Cut.append(value)
    def insert_Cut_at(self, index, value): self.Cut.insert(index, value)
    def replace_Cut_at(self, index, value): self.Cut[index] = value
    def hasContent_(self):
        if (
            self.Cut
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ucsns:', name_='CutsType1', namespacedef_='xmlns:ucsns="http://tempuri.org/UniversalCaptureSpecification/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CutsType1')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CutsType1')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ucsns:', name_='CutsType1', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ucsns:', name_='CutsType1'):
        pass
    def exportChildren(self, outfile, level, namespace_='ucsns:', name_='CutsType1', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Cut_ in self.Cut:
            Cut_.export(outfile, level, namespace_, name_='Cut', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Cut':
            obj_ = CutType2.factory()
            obj_.build(child_)
            self.Cut.append(obj_)
            obj_.original_tagname_ = 'Cut'
# end class CutsType1


class CutType2(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Start=None, Duration=None):
        self.original_tagname_ = None
        self.Start = Start
        self.Duration = Duration
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CutType2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CutType2.subclass:
            return CutType2.subclass(*args_, **kwargs_)
        else:
            return CutType2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Start(self): return self.Start
    def set_Start(self, Start): self.Start = Start
    def get_Duration(self): return self.Duration
    def set_Duration(self, Duration): self.Duration = Duration
    def hasContent_(self):
        if (
            self.Start is not None or
            self.Duration is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ucsns:', name_='CutType2', namespacedef_='xmlns:ucsns="http://tempuri.org/UniversalCaptureSpecification/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CutType2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CutType2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ucsns:', name_='CutType2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ucsns:', name_='CutType2'):
        pass
    def exportChildren(self, outfile, level, namespace_='ucsns:', name_='CutType2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Start is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:Start>%s</ucsns:Start>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Start), input_name='Start')), eol_))
        if self.Duration is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:Duration>%s</ucsns:Duration>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Duration), input_name='Duration')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Start':
            Start_ = child_.text
            Start_ = self.gds_validate_string(Start_, node, 'Start')
            self.Start = Start_
        elif nodeName_ == 'Duration':
            Duration_ = child_.text
            Duration_ = self.gds_validate_string(Duration_, node, 'Duration')
            self.Duration = Duration_
# end class CutType2


class TagsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Tag=None):
        self.original_tagname_ = None
        if Tag is None:
            self.Tag = []
        else:
            self.Tag = Tag
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TagsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TagsType.subclass:
            return TagsType.subclass(*args_, **kwargs_)
        else:
            return TagsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Tag(self): return self.Tag
    def set_Tag(self, Tag): self.Tag = Tag
    def add_Tag(self, value): self.Tag.append(value)
    def insert_Tag_at(self, index, value): self.Tag.insert(index, value)
    def replace_Tag_at(self, index, value): self.Tag[index] = value
    def hasContent_(self):
        if (
            self.Tag
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ucsns:', name_='TagsType', namespacedef_='xmlns:ucsns="http://tempuri.org/UniversalCaptureSpecification/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TagsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TagsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ucsns:', name_='TagsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ucsns:', name_='TagsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='ucsns:', name_='TagsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Tag_ in self.Tag:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:Tag>%s</ucsns:Tag>%s' % (self.gds_encode(self.gds_format_string(quote_xml(Tag_), input_name='Tag')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Tag':
            Tag_ = child_.text
            Tag_ = self.gds_validate_string(Tag_, node, 'Tag')
            self.Tag.append(Tag_)
# end class TagsType


class ExtensionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Extension=None):
        self.original_tagname_ = None
        if Extension is None:
            self.Extension = []
        else:
            self.Extension = Extension
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExtensionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExtensionsType.subclass:
            return ExtensionsType.subclass(*args_, **kwargs_)
        else:
            return ExtensionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Extension(self): return self.Extension
    def set_Extension(self, Extension): self.Extension = Extension
    def add_Extension(self, value): self.Extension.append(value)
    def insert_Extension_at(self, index, value): self.Extension.insert(index, value)
    def replace_Extension_at(self, index, value): self.Extension[index] = value
    def hasContent_(self):
        if (
            self.Extension
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ucsns:', name_='ExtensionsType', namespacedef_='xmlns:ucsns="http://tempuri.org/UniversalCaptureSpecification/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExtensionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ExtensionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ucsns:', name_='ExtensionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ucsns:', name_='ExtensionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='ucsns:', name_='ExtensionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Extension_ in self.Extension:
            Extension_.export(outfile, level, namespace_, name_='Extension', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Extension':
            obj_ = Extension.factory()
            obj_.build(child_)
            self.Extension.append(obj_)
            obj_.original_tagname_ = 'Extension'
# end class ExtensionsType


class AttachmentsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Attachment=None):
        self.original_tagname_ = None
        if Attachment is None:
            self.Attachment = []
        else:
            self.Attachment = Attachment
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AttachmentsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AttachmentsType.subclass:
            return AttachmentsType.subclass(*args_, **kwargs_)
        else:
            return AttachmentsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Attachment(self): return self.Attachment
    def set_Attachment(self, Attachment): self.Attachment = Attachment
    def add_Attachment(self, value): self.Attachment.append(value)
    def insert_Attachment_at(self, index, value): self.Attachment.insert(index, value)
    def replace_Attachment_at(self, index, value): self.Attachment[index] = value
    def hasContent_(self):
        if (
            self.Attachment
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ucsns:', name_='AttachmentsType', namespacedef_='xmlns:ucsns="http://tempuri.org/UniversalCaptureSpecification/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AttachmentsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AttachmentsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ucsns:', name_='AttachmentsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ucsns:', name_='AttachmentsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='ucsns:', name_='AttachmentsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Attachment_ in self.Attachment:
            Attachment_.export(outfile, level, namespace_, name_='Attachment', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Attachment':
            obj_ = AttachmentType.factory()
            obj_.build(child_)
            self.Attachment.append(obj_)
            obj_.original_tagname_ = 'Attachment'
# end class AttachmentsType


class AttachmentType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, File=None, LocalFilename=None, MimeType=None):
        self.original_tagname_ = None
        self.File = File
        self.LocalFilename = LocalFilename
        self.MimeType = MimeType
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AttachmentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AttachmentType.subclass:
            return AttachmentType.subclass(*args_, **kwargs_)
        else:
            return AttachmentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_File(self): return self.File
    def set_File(self, File): self.File = File
    def get_LocalFilename(self): return self.LocalFilename
    def set_LocalFilename(self, LocalFilename): self.LocalFilename = LocalFilename
    def get_MimeType(self): return self.MimeType
    def set_MimeType(self, MimeType): self.MimeType = MimeType
    def hasContent_(self):
        if (
            self.File is not None or
            self.LocalFilename is not None or
            self.MimeType is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ucsns:', name_='AttachmentType', namespacedef_='xmlns:ucsns="http://tempuri.org/UniversalCaptureSpecification/v1"', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AttachmentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AttachmentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ucsns:', name_='AttachmentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ucsns:', name_='AttachmentType'):
        pass
    def exportChildren(self, outfile, level, namespace_='ucsns:', name_='AttachmentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.File is not None:
            self.File.export(outfile, level, namespace_, name_='File', pretty_print=pretty_print)
        if self.LocalFilename is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:LocalFilename>%s</ucsns:LocalFilename>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.LocalFilename), input_name='LocalFilename')), eol_))
        if self.MimeType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ucsns:MimeType>%s</ucsns:MimeType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.MimeType), input_name='MimeType')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'File':
            obj_ = File.factory()
            obj_.build(child_)
            self.File = obj_
            obj_.original_tagname_ = 'File'
        elif nodeName_ == 'LocalFilename':
            LocalFilename_ = child_.text
            LocalFilename_ = self.gds_validate_string(LocalFilename_, node, 'LocalFilename')
            self.LocalFilename = LocalFilename_
        elif nodeName_ == 'MimeType':
            MimeType_ = child_.text
            MimeType_ = self.gds_validate_string(MimeType_, node, 'MimeType')
            self.MimeType = MimeType_
# end class AttachmentType


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Session'
        rootClass = Session
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:ucsns="http://tempuri.org/UniversalCaptureSpecification/v1"',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Session'
        rootClass = Session
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Session'
        rootClass = Session
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:ucsns="http://tempuri.org/UniversalCaptureSpecification/v1"')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Session'
        rootClass = Session
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from ucs_session import *\n\n')
        sys.stdout.write('import ucs_session as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "AttachmentType",
    "AttachmentsType",
    "Contact",
    "CutType",
    "CutType2",
    "CutsType",
    "CutsType1",
    "EntryType",
    "Extension",
    "ExtensionsType",
    "File",
    "ImageType",
    "ImagesType",
    "PresentationType",
    "PresentationsType",
    "Session",
    "SlideChangeType",
    "SlideChangesType",
    "TableOfContentsType",
    "TagsType",
    "TranscriptType",
    "TranscriptsType",
    "VideoType",
    "VideosType"
]
